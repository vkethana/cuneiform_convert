# Not all code was made by me. Some helper functions, e.g. get_image_file_url were generated by ChatGPT

from PIL import Image
from SPARQLWrapper import SPARQLWrapper, JSON
from pprint import *
import imagehash
import json
import os
import requests
import shutil
import sys
import urllib.parse
import requests
from bs4 import BeautifulSoup
import re

# Function for getting the actual image file associated with the URL
def get_image_file_url(wikidata_url):
    # Send an HTTP GET request to the Wikidata page
    response = requests.get(wikidata_url)

    if response.status_code == 200:
        # Parse the HTML content of the page
        soup = BeautifulSoup(response.text, 'html.parser')

        # Find the image file URL using a regular expression pattern
        file_url_pattern = re.compile(r'fullImageLink.*?href="(.*?)".*?Download', re.DOTALL)
        match = re.search(file_url_pattern, str(soup))

        if match:
            image_file_url = match.group(1)
            return image_file_url
        else:
            return None
    else:
        return None

# Obtain q-id given URL of wikidata entry
def get_q_id(url):
  q_index = url.find('Q')
  if q_index != -1:
    # Extract everything after 'Q'
    result = url[q_index + 1:]  # Add 2 to skip 'Q='
    return result

endpoint_url = "https://query.wikidata.org/sparql"

query = """SELECT ?form ?charaLabel ?formLabel ?image WHERE {
  ?chara wdt:P282 wd:Q401.
  ?form wdt:P180 ?chara;
    wdt:P31 wd:Q118867680;
    wdt:P2348 wd:Q15782728.
  FILTER (?form != wd:Q119518134 && ?form != wd:Q119518170)
  OPTIONAL { ?form wdt:P18 ?image. }
  OPTIONAL {
    ?form rdfs:label ?formLabel.
    FILTER((LANG(?formLabel)) = "en")
  }
  OPTIONAL {
    ?chara rdfs:label ?charaLabel.
    FILTER((LANG(?charaLabel)) = "en")
  }
}"""

# This is a custom sparql query, it excludes the two cuneiform signs that I already changed to SVG
def get_results(endpoint_url, query):
    user_agent = "WDQS-example Python/%s.%s" % (sys.version_info[0], sys.version_info[1])
    # TODO adjust user agent; see https://w.wiki/CX6
    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)
    sparql.setQuery(query)
    sparql.setReturnFormat(JSON)
    return sparql.query().convert()

# Create dict for sparql query
results = get_results(endpoint_url, query)
q_id_to_form_label = {}
for item in results["results"]["bindings"]:
    # Get the Q-ID
    curr_q_id = get_q_id(item['form']['value'])
    # Add to dictoinary
    q_id_to_form_label[curr_q_id] = item['formLabel']['value']
    # Get the img URL
    url = item["image"]['value']
    # you have to wrap this in a function call because the provided image URL doesn't actually work, you have to modify it to get the image file
    # Get image data from URL
    img_path = "png_wikidata/" + curr_q_id + ".png"
    if os.path.exists(img_path):
      print("Downloading ", curr_q_id, "...")
      print("File already exists!")
    else:
      img_data = requests.get(url).content
      with open(img_path, 'wb') as handler:
        handler.write(img_data)

# Convert the PNGs to SVGs
def conv_to_svg(folder_prefix):
    folder_path = "png_"+folder_prefix
    print("Converting the PNGs to SVGs for the folder " + folder_path)
    for filename in os.listdir(folder_path):
      if filename[-4:] == ".png":
        file_id = os.path.splitext(filename)[0]
        print("Converting " + file_id + " ...")

        if folder_prefix == "wikidata":
            file_form_label = q_id_to_form_label[file_id]
            file_form_label = file_form_label.replace('/', ' ') # necessary because of how UNIX file structures work
            file_id = file_form_label

        svg_path = 'svg_' + folder_prefix + '/' + file_id
        svg_path += '.svg'

        pnm_filepath = "misc_files/" + file_id + ".pnm"
        recolor_filepath = "misc_files/" + file_id + "_recolor.png"
        if os.path.exists(svg_path):
          print("   SVG file already exists! Converting anyway...")
          #continue

        cmds = []

        # Convert PNG into nongrayscale version so that imgmagick can read it properly
        if not os.path.exists(recolor_filepath):
          cmds.append('convert -density 300 "' + folder_path + '/' + filename + '" -quality 90 -colorspace RGB -background white -alpha remove -alpha off "' + recolor_filepath + '"')
        else:
          print("Recolored PNGs already exist!")

        # Convert PNG into PNM
        if not os.path.exists(pnm_filepath):
          cmds.append('convert "' + recolor_filepath + '" "' + pnm_filepath + '"')
        else:
          print("PNM files already exist!")

        # Potrace turns the PNM img to SVG (Potrace can't use PNG files)
        cmds.append('potrace "' + pnm_filepath + '" -s -o "' + svg_path + '"')

        # Remove the unneeded intermediate files (optional)
        #pt4 = "rm intermediate_files/*"
        # If you uncomment the above line, the code will use up a lot less space. But it's often helpful to keep the intermediate files to speed up subsequent conversion tasks

        for cmd in cmds:
          #print(cmd)
          os.system(cmd)

conv_to_svg("wikidata")
conv_to_svg("stratford")
