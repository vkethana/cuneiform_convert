# Not all code was made by me. Some helper functions, e.g. get_image_file_url were generated by ChatGPT

from PIL import Image
from SPARQLWrapper import SPARQLWrapper, JSON
from pprint import *
import imagehash
import json
import os
import requests
import shutil
import sys
import urllib.parse
import requests
from bs4 import BeautifulSoup
import re

# Function for getting the actual image file associated with the URL
def get_image_file_url(wikidata_url):
    # Send an HTTP GET request to the Wikidata page
    response = requests.get(wikidata_url)

    if response.status_code == 200:
        # Parse the HTML content of the page
        soup = BeautifulSoup(response.text, 'html.parser')

        # Find the image file URL using a regular expression pattern
        file_url_pattern = re.compile(r'fullImageLink.*?href="(.*?)".*?Download', re.DOTALL)
        match = re.search(file_url_pattern, str(soup))

        if match:
            image_file_url = match.group(1)
            return image_file_url
        else:
            return None
    else:
        return None

# Gets rid of transparency in SVG file
# generated with ChatGPT
def remove_transparency(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    # Check if there are at least 3 lines in the file
    if len(lines) >= 3 and lines[2].startswith('<path style="fill:#ffffff; stroke:none;'):
        # Comment out the third line
        lines[2] = '<!-- ' + lines[2] + "-->"
        #del lines[2]

        # Write modified content back to the file
        with open(file_path, 'w') as file:
            file.writelines(lines)

# Obtain q-id given URL of wikidata entry
def get_q_id(url):
  q_index = url.find('Q')
  if q_index != -1:
    # Extract everything after 'Q'
    result = url[q_index + 1:]  # Add 2 to skip 'Q='
    return result

endpoint_url = "https://query.wikidata.org/sparql"

query = """SELECT ?form ?charaLabel ?formLabel ?image WHERE {
  ?chara wdt:P282 wd:Q401.
  ?form wdt:P180 ?chara;
    wdt:P31 wd:Q118867680;
    wdt:P2348 wd:Q15782728.
  FILTER (?form != wd:Q119518134 && ?form != wd:Q119518170)
  OPTIONAL { ?form wdt:P18 ?image. }
  OPTIONAL {
    ?form rdfs:label ?formLabel.
    FILTER((LANG(?formLabel)) = "en")
  }
  OPTIONAL {
    ?chara rdfs:label ?charaLabel.
    FILTER((LANG(?charaLabel)) = "en")
  }
}"""
# This is a custom sparql query, it excludes the two cuneiform signs that I already changed to SVG

def get_results(endpoint_url, query):
    user_agent = "WDQS-example Python/%s.%s" % (sys.version_info[0], sys.version_info[1])
    # TODO adjust user agent; see https://w.wiki/CX6
    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)
    sparql.setQuery(query)
    sparql.setReturnFormat(JSON)
    return sparql.query().convert()

# Create dict for sparql query
results = get_results(endpoint_url, query)
q_id_to_form_label = {}
for item in results["results"]["bindings"]:
    #pprint(item)
    # Get the Q-ID
    curr_q_id = get_q_id(item['form']['value'])
    #print(curr_q_id)
    # Add to dictoinary
    q_id_to_form_label[curr_q_id] = item['formLabel']['value']
    # Get the img URL
    url = item["image"]['value']
    #print(curr_q_id, url)
    #url = get_image_file_url(url)
    #print(curr_q_id, url)
    # you have to wrap this in a function call because the provided image URL doesn't actually work, you have to modify it to get the image file
    # Get image data from URL
    # Download image
    #print("Downloading ", curr_q_id, "...")
    img_path = "png_wikidata/" + curr_q_id + ".png"
    if os.path.exists(img_path):
      print("Downloading ", curr_q_id, "...")
      print("File already exists!")
    else:
      img_data = requests.get(url).content
      with open(img_path, 'wb') as handler:
        handler.write(img_data)

# Convert the PNGs to SVGs
print("Converting the PNGs to SVGs...")
for filename in os.listdir('png_wikidata'):
  if filename[-4:] == ".png":
    #print("autotrace png/" + filename + " -output-format svg -output-file svg/" + os.path.splitext(filename)[0] + ".svg")
    file_id = os.path.splitext(filename)[0]
    file_form_label = q_id_to_form_label[file_id]
    file_form_label = file_form_label.replace('/', ' ') # necessary because of how UNIX file structures work
    new_path = 'svg_wikidata/"' + file_form_label
    new_path += '.svg"'

    new_path_without_quotes = 'svg_wikidata/' + file_form_label +'.svg'
    if os.path.exists(new_path_without_quotes):
      print("File already exists!")
      continue

    if filename == '119574268.png' or filename == '119573897.png':
      print("\n\nWARNING: Filename contains illegal character. Attempting to convert...")
      print("Converting", filename, "to", new_path, "\n\n")

    print("Running the command:   autotrace png_wikidata/" + filename + " -output-format svg -output-file " + new_path)
    os.system('autotrace png_wikidata/' + filename + ' -output-format svg -output-file ' + new_path)
    #shutil.copy("svg_with_form_label/"+file_form_label+".svg", "svg_with_qcode/"+file_id+".svg")

for filename in os.listdir('png_stratford'):
  if filename[-4:] == ".png":
    #print("autotrace png/" + filename + " -output-format svg -output-file svg/" + os.path.splitext(filename)[0] + ".svg")
    file_id = os.path.splitext(filename)[0]
    new_path = 'svg_stratford/' + file_id
    new_path += '.svg'

    if os.path.exists(new_path):
      print("File already exists!")
      continue

    print("Running the command:   autotrace png_stratford/" + filename + " -output-format svg -output-file " + new_path)
    os.system('autotrace png_stratford/' + filename + ' -output-format svg -output-file ' + new_path)
    #shutil.copy("svg_with_form_label/"+file_form_label+".svg", "svg_with_qcode/"+file_id+".svg")


def remove_transparency_in_directory(directory_path):
# Iterate through files in the directory
  for filename in os.listdir(directory_path):
      if filename.endswith(".svg"):
          file_path = os.path.join(directory_path, filename)
          remove_transparency(file_path)
          print(f"Processed: {file_path}")

remove_transparency_in_directory('svg_stratford')
remove_transparency_in_directory('svg_wikidata')

